{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dataengineers"
		},
		"Ls_AzureDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Ls_AzureDatabase'"
		},
		"ls_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob'"
		},
		"ls_synapse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_synapse'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Test_pl_feature into main branch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/commantble splite into 4tble')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_comman to 4tbl",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_comman to 4tbl",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"commantablesplit": {},
									"desti": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T17:46:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_comman to 4tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Ds_blob2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adb4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-15T17:29:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_blob2')]",
				"[concat(variables('factoryId'), '/datasets/ds_adb4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_upadate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_get_tbl",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select distinct mapping_table from mapping_table where mapping_table is not null",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_adb4",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_Tbl",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_get_tbl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_get_tbl').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set_var_tbl",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "table",
										"value": {
											"value": "@item().mapping_table",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"table": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-15T12:15:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adb4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_blob2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mapping_table.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "mapping_table",
						"type": "String"
					},
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "employees_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SynapseAnalytics_polybase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "synapsepractise"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adb1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AzureDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "employee_count",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employees_tbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adb2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AzureDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "employee_count",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "accout_tbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adb3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AzureDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "employee_count",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "etl_tbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adb4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AzureDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "employee_count",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "mapping_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_commantbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mapping_table.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": " employees_count",
						"type": "String"
					},
					{
						"name": "employees_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_polybase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Department_Details.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Departid",
						"type": "String"
					},
					{
						"name": "DepartName",
						"type": "String"
					},
					{
						"name": "Departcode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_AzureDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Ls_AzureDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_synapse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_synapse_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_comman to 4tbl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Ds_blob2",
								"type": "DatasetReference"
							},
							"name": "commantablesplit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adb1",
								"type": "DatasetReference"
							},
							"name": "desti"
						},
						{
							"dataset": {
								"referenceName": "ds_adb2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_adb3",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_adb4",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "mappingtblesplit"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "acaa"
						},
						{
							"name": "ecee"
						},
						{
							"name": "ahcc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mapping_table as string,",
						"          Source as string,",
						"          employees_count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> commantablesplit",
						"commantablesplit split(mapping_table==\"employees_tbl\",",
						"     mapping_table==\"Hr_tbl\",",
						"     mapping_table==\"etl_tbl\",",
						"     mapping_table==\"accout_tbl\",",
						"     disjoint: false) ~> mappingtblesplit@(employeestbl, Hrtbl, etltbl, accouttbl, othersrows)",
						"mappingtblesplit@employeestbl alterRow(updateIf(employees_count=='null')) ~> AlterRow1",
						"mappingtblesplit@accouttbl alterRow(updateIf(employees_count==\"null\")) ~> acaa",
						"mappingtblesplit@etltbl alterRow(updateIf(employees_count==\"null\")) ~> ecee",
						"mappingtblesplit@Hrtbl alterRow(updateIf(employees_count==\"null\")) ~> ahcc",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          source as string,",
						"          employee_count as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['employee_count'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          source = Source,",
						"          employee_count = employees_count",
						"     )) ~> desti",
						"acaa sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          source as string,",
						"          employee_count as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          source = Source,",
						"          employee_count = employees_count",
						"     )) ~> sink1",
						"ecee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          source as string,",
						"          employee_count as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          source = Source,",
						"          employee_count = employees_count",
						"     )) ~> sink2",
						"ahcc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          source as string,",
						"          employee_count as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          source = Source,",
						"          employee_count = employees_count",
						"     )) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Ds_blob2')]",
				"[concat(variables('factoryId'), '/datasets/ds_adb1')]",
				"[concat(variables('factoryId'), '/datasets/ds_adb2')]",
				"[concat(variables('factoryId'), '/datasets/ds_adb3')]",
				"[concat(variables('factoryId'), '/datasets/ds_adb4')]"
			]
		}
	]
}